/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mw.destool;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;

/**
 *
 * @author Maple
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcSelectPath = new javax.swing.JFileChooser();
        lblPath = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        lblKey = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        svLog = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        btnEncipher = new javax.swing.JButton();
        btnDecipher = new javax.swing.JButton();
        lblSkip = new javax.swing.JLabel();
        txtSkip = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Des Cipher (By M.Wan)");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblPath.setText("Path:");

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        lblKey.setText("Key:");

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setLineWrap(true);
        txtLog.setRows(5);
        svLog.setViewportView(txtLog);

        btnEncipher.setText("Encipher");
        btnEncipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncipherActionPerformed(evt);
            }
        });

        btnDecipher.setText("Decipher");
        btnDecipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecipherActionPerformed(evt);
            }
        });

        lblSkip.setText("Skip:");

        jLabel1.setText("seperate by ;");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDecipher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEncipher))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblKey)
                                    .addComponent(lblPath)
                                    .addComponent(lblSkip))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtKey)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBrowse)
                                        .addGap(0, 14, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtSkip)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1))))
                            .addComponent(svLog))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPath)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKey)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSkip)
                    .addComponent(txtSkip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(svLog, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncipher)
                    .addComponent(btnDecipher))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        fcSelectPath.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int result = fcSelectPath.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            txtPath.setText(fcSelectPath.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnEncipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncipherActionPerformed
        // TODO add your handling code here:
        if (txtPath.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(this, "Please select a file or directory to cipher/decipher.");
            return;
        }
        if (txtKey.getText().length() <= 0) {
            JOptionPane.showMessageDialog(this, "Please input the DES cipher key.");
            return;
        }
        
        File hData = new File(txtPath.getText().trim());
        if (!hData.exists()) {
            JOptionPane.showMessageDialog(this, "The data path to cipher doesn't exist.");
            return;
        }
        
        this.saveConfig();
        
        if (_inProcess) {
            return;
        }
        _inProcess = true;
        
        Thread worker = new Thread() {
            @Override
            public void run() {
                beginEncipher();
            }
        };
        worker.start();
    }//GEN-LAST:event_btnEncipherActionPerformed

    private void btnDecipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecipherActionPerformed
        // TODO add your handling code here:
        if (txtPath.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(this, "Please select a file or directory to cipher/decipher.");
            return;
        }
        if (txtKey.getText().length() <= 0) {
            JOptionPane.showMessageDialog(this, "Please input the DES cipher key.");
            return;
        }
        
        this.saveConfig();
        
        if (_inProcess) {
            return;
        }
        _inProcess = true;
        
        File hData = new File(txtPath.getText().trim());
        if (!hData.exists()) {
            JOptionPane.showMessageDialog(this, "The data path to cipher doesn't exist.");
            return;
        }
        
        Thread worker = new Thread() {
            @Override
            public void run() {
                beginDecipher();
            }
        };
        worker.start();
    }//GEN-LAST:event_btnDecipherActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        // get config info
        File hSave = new File("config.sav");
        if (hSave.exists()) {
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(hSave));
                SaveData save = (SaveData)ois.readObject();
                txtPath.setText(save.getDataPath());
                txtKey.setText(save.getCipherKey());
                txtSkip.setText(save.getSkipItems());
                ois.close();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formWindowOpened

    private void saveConfig() {
        // Serialize dialog info
        File hSave = new File("config.sav");
        try {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(hSave));
            SaveData save = new SaveData(txtPath.getText().trim(), txtKey.getText(), txtSkip.getText());
            oos.writeObject(save);
            oos.close();
        } catch (IOException ex) {
            this.log("Error: " + ex.getMessage());
        }
    }
    
    private void beginEncipher() {
        File hData = new File(txtPath.getText().trim());
        Action handler = new Action(this, "doEncipher");
        this.doActionForEachFile(hData, handler);
        this.log("All complete.");
        _inProcess = false;
    }
    
    private void doEncipher(File file) {
        try {
            this.log("Enciphering " + file.getAbsolutePath() + "...");
            String key = txtKey.getText();
            
            FileInputStream fis = new FileInputStream(file);
            FileChannel channel = fis.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate((int)channel.size());
            while (channel.read(buffer) > 0) {
                // do nothing.
            }
            // encipher
            byte[] result = DESUtils.getInstance().encipher(buffer.array(), key.getBytes());
            fis.close();
            
            FileOutputStream fos = new FileOutputStream(file);
            // write the encrypted data.
            fos.write(result);
            fos.close();
            this.log(file.getAbsolutePath() + " is done.");
        } catch (Exception ex) {
            this.log("error: " + ex.getMessage());
        }
    }
    
    private void beginDecipher() {
        File hData = new File(txtPath.getText().trim());
        Action handler = new Action(this, "doDecipher");
        this.doActionForEachFile(hData, handler);
        this.log("All complete.");
        _inProcess = false;
    }
    
    private void doDecipher(File file) {
        try {
            this.log("Deciphering " + file.getAbsolutePath() + "...");
            String key = txtKey.getText();
            
            FileInputStream fis = new FileInputStream(file);
            FileChannel channel = fis.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate((int)channel.size());
            while (channel.read(buffer) > 0) {
                // do nothing.
            }
            // encipher
            byte[] result = DESUtils.getInstance().decipher(buffer.array(), key.getBytes());
            fis.close();
            
            FileOutputStream fos = new FileOutputStream(file);
            // write the encrypted data.
            fos.write(result);
            fos.close();
            this.log(file.getAbsolutePath() + " is done.");
        } catch (Exception ex) {
            this.log("error: " + ex.getMessage());
        }
    }
    
    private boolean shouldSkip(File file) {
        String[] skips = txtSkip.getText().trim().split(";");
        for (int i = 0; i < skips.length; i++) {
            this.log(file.getName());
            if (skips[i].equals(file.getName())) {
                return true;
            }
        }
        return false;
    }
    
    private void doActionForEachFile(File dir, Action handler) {
        if (this.shouldSkip(dir)) {
            this.log("Skip: " + dir.getAbsolutePath());
            return;
        }
        if (dir.isDirectory()) {
            File[] children = dir.listFiles();
            File hFile;
            for (File children1 : children) {
                hFile = children1;
                this.doActionForEachFile(hFile, handler);
            }
        } else {
            handler.invoke(dir);
        }
    }
    
    private void log(String content) {
        _contents.offer(content);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtLog.append(_contents.poll() + "\n");
                JScrollBar scrollBar = svLog.getVerticalScrollBar();
                if (scrollBar != null) {
                    scrollBar.setValue(scrollBar.getMaximum());
                }
            }
        });
    }
    
    private Queue<String> _contents = new LinkedList<String>();
    private boolean _inProcess = false;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnDecipher;
    private javax.swing.JButton btnEncipher;
    private javax.swing.JFileChooser fcSelectPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblKey;
    private javax.swing.JLabel lblPath;
    private javax.swing.JLabel lblSkip;
    private javax.swing.JScrollPane svLog;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtSkip;
    // End of variables declaration//GEN-END:variables
}
